{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "A100",
      "authorship_tag": "ABX9TyOchiegoFix6Z7DMqCdEsdl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/moriomchi/AIProject/blob/main/Initial%20Model%20!\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Downloading The Dataset"
      ],
      "metadata": {
        "id": "YJhQ2lepWuxS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wPbXP9gZWr5X",
        "outputId": "f2c41616-9f9e-4ff4-e092-e1b406893538"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.6.17)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2024.12.14)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.2.3)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.10)\n"
          ]
        }
      ],
      "source": [
        "# installing kaggle API\n",
        "!pip install kaggle\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#mounting google drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hkCdloxLW3GX",
        "outputId": "adb9c4fb-4ca2-447d-d509-499c25f5352d"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_drive_path = \"/content/drive/My Drive/deepfake_project\"\n",
        "dataset_path = f\"{base_drive_path}/train_sample_videos\"\n",
        "metadata_path = f\"{dataset_path}/metadata.json\"\n",
        "real_path = f\"{base_drive_path}/real_videos\"\n",
        "fake_path = f\"{base_drive_path}/fake_videos\"\n",
        "#subset of data to be processed:\n",
        "small_real_path = f\"{base_drive_path}/small_real_videos\"\n",
        "small_fake_path = f\"{base_drive_path}/small_fake_videos\"\n",
        "ssim_output_dir = f\"{base_drive_path}/ssim_masks\"\n"
      ],
      "metadata": {
        "id": "RzlxGhZuXDcy"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#making the directories:\n",
        "import os\n",
        "\n",
        "os.makedirs(real_path, exist_ok=True)\n",
        "os.makedirs(fake_path, exist_ok=True)\n",
        "os.makedirs(small_real_path, exist_ok=True)\n",
        "os.makedirs(small_fake_path, exist_ok=True)\n",
        "os.makedirs(ssim_output_dir, exist_ok=True)\n"
      ],
      "metadata": {
        "id": "YTE8-XJqa-8r"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#installing kaggle API\n",
        "!pip install kaggle\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53YPf7GPbGpi",
        "outputId": "06cf8fc4-d150-458f-dbdf-fd3db2eff4e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.6.17)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2024.12.14)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.2.3)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#uploading kaggle.json\n",
        "from google.colab import files\n",
        "files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "id": "Z5Gpl1zxbVUh",
        "outputId": "1709a637-a6a7-4423-c4d2-a59b98a68e79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b170c224-0e9e-4d69-86c0-1637a2f5c234\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b170c224-0e9e-4d69-86c0-1637a2f5c234\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle.json': b'{\"username\":\"mariamasfcef\",\"key\":\"86ccbc28d2fd75147f8cf66b25228656\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#configuring kaggle\n",
        "!mkdir ~/.kaggle\n",
        "!mv kaggle.json ~/.kaggle/\n",
        "!chmod 600 ~/.kaggle/kaggle.json\n"
      ],
      "metadata": {
        "id": "Yp96o-APbjAV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#downloading the DFDC dataset:\n",
        "!kaggle competitions download -c deepfake-detection-challenge\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5fdcbnxtboCx",
        "outputId": "00911211-2b64-473f-b824-57578382bd53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "deepfake-detection-challenge.zip: Skipping, found more recently modified local copy (use --force to force download)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_path = \"/content/drive/My Drive/deepfake_project\"\n",
        "os.makedirs(dataset_path, exist_ok=True)"
      ],
      "metadata": {
        "id": "UinzXgure_ng"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip -o deepfake-detection-challenge.zip -d \"/content/drive/My Drive/deepfake_project\"\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F7UJ7LB3fx1S",
        "outputId": "cd978862-bd6e-4370-c591-81be9b92ac50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  deepfake-detection-challenge.zip\n",
            "  inflating: /content/drive/My Drive/deepfake_project/sample_submission.csv  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/aassnaulhq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/aayfryxljh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/acazlolrpz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/adohdulfwb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ahjnxtiamx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ajiyrjfyzp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/aktnlyqpah.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/alrtntfxtd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/aomqqjipcp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/apedduehoy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/apvzjkvnwn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/aqrsylrzgi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/axfhbpkdlc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ayipraspbn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bcbqxhziqz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bcvheslzrq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bdshuoldwx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bfdopzvxbi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bfjsthfhbd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bjyaxvggle.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bkcyglmfci.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bktkwbcawi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bkuzquigyt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/blnmxntbey.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/blszgmxkvu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bnuwxhfahw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bofrwgeyjo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/btdxnajogv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bvpeerislp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bwdmzwhdnw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/bzvzpwrabw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cekarydqba.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cekwtyxdoo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cjkctqqakb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cnpanmywno.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cnxccbjlct.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/coqwgzpbhx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cosghhimnd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/coujjnypba.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cqhwesrciw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cqxxumarvp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/csnkohqxdv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/cxsvvnxpyz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/czfqlbcfpa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dcqodpzomd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ddtbarpcgo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/demuhxssgl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/didzujjhtg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dkuqbduxev.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dmmvuaikkv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dnmowthjcj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/doniqevxeg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dozjwhnedd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dpevefkefv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dpmgoiwhuf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dsnxgrfdmd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dtozwcapoa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dvkdfhrpph.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dvtpwatuja.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dvwpvqdflx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dxfdovivlw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dxgnpnowgk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dyjklprkoc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dzkyxbbqkr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/dzojiwfvba.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ecumyiowzs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/eisofhptvk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ekboxwrwuv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ekelfsnqof.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ekvwecwltj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/elackxuccp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/eppyqpgewp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/eqslzbqfea.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/eryjktdexi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/esjdyghhog.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/esmqxszybs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/espkiocpxq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/etdliwticv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/evysmtpnrf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/eyguqfmgzh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/eywdmustbb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/famlupsgqm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fddmkqjwsh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fjrueenjyp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fjxovgmwnm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fmhiujydwo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fmvvmcbdrw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fneqiqpqvs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fnxgqcvlsd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fopjiyxiqd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fpevfidstw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fqgypsunzr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/frqfsucgao.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fsdrwikhge.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fwykevubzy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fxuxxtryjn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/fzvpbrzssi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gahgyuwzbu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gbnzicjyhz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gccnvdoknm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gcdtglsoqj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gfcycflhbo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gfdjzwnpyp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gfgcwxkbjd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ggdpclfcgk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ggzjfrirjh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ghnpsltzyn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gkutjglghz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gochxzemmq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gpsxfxrjrr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gqnaxievjx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/gunamloolc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/halvwiltfs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hbufmvbium.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hcanfkwivl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hclsparpth.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hefisnapds.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/heiyoojifp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hevcclcklc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hfsvqabzfq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hicjuubiau.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hierggamuo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hitfycdavv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hnfwagcxdf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/honxqdilvv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hqzwudvhih.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hsbljbsgxr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hsbwhlolsn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hszwwswewp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/htzbnroagi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/huvlwkxoxm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hweshqpfwe.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hxwtsaydal.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hyjqolupxn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hzoiotcykp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/hzssdinxec.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ibxfxggtqh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/icbsahlivv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/igpvrfjdzc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ihglzxzroo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/iksxzpqxzi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ilqwcbprqa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/imdmhwkkni.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/iorbtaarte.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ipkpxvwroe.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ipvwtgdlre.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/irqzdokcws.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/itfsvvmslp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/iznnzjvaxc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jawgcggquk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jhczqfefgw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jiavqbrkyk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jiswxuqzyz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jquevmhdvc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jsbpkpxwew.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jsysgmycsx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jyfvaequfg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jyoxdvxpza.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jytrvwlewz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/jzmzdispyo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kcjvhgvhpt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/keioymnobc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kezwvsxxzj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/khpipxnsvx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kmcdjxmnoa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kmqkiihrmj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/knxltsvzyu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kowiwvrjht.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kqlvggiqee.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kvmpmhdxly.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/kwfdyqofzw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lbfqksftuo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lbigytrrtr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lebzjtusnr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lhvjzhjxdp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ljauauuyka.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ljouzjaqqe.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/llplvmcvbl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lmdyicksrv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lnhkjhyhvw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lnjkpdviqb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lpgxwdgnio.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lpkgabskbw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lujvyveojc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/lyoslorecs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mdfndlljvt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mkmgcxaztt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mkzaekkvej.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mllzkpgatp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mnowxangqx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mnzabbkpmt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mohiqoogpb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mszblrdprw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mwnibuujwz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mwwploizlj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mxahsihabr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/mxlipjhmqk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ncmpqwmnzb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ncoeewrdlo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ndikguxzek.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nikynwcvuh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/njzshtfmcw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nkhzxomani.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/novarhxpbj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nplviymzlg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nswtvttxre.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nthpnwylxo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nwvloufjty.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nwvsbmyndn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nxgzmgzkfv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nxnmkytwze.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nxzgekegsp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nycmyuzpml.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/nymodlmxni.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oaguiggjyv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ocgdbrgmtq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oefukgnvel.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oelqpetgwj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ojsxxkalat.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/okgelildpc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/omphqltjdd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ooafcxxfrs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oocincvedt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oojxonbgow.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/opvqdabdap.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/orekjthsef.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/orixbcfvdz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ouaowjmigq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/owaogcehvc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oyqgwjdwaj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/oysopgovhu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/papagllumt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pcoxcmtroa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pcyswtgick.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pdswwyyntw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pdufsewrec.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/petmyhjclt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/phjvutxpoi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pqdeutauqc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pqthmvwonf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/prhmixykhr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/prwsfljdjo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/psesikjaxx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ptbfnkajyi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ptbnewtvon.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pxcfrszlgi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/pxjkzvqomp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qarqtkvgby.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qcbkztamqc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qclpbcbgeq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qdqdsaiitt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qhkzlnzruj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qhsehzgxqj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qlqhjcshpk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qlvsqdroqo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qooxnxqqjb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qqnlrngaft.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qsjiypnjwi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qswlzfgcgj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qxyrtwozyw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/qyyhuvqmyf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rcecrgeotc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rcjfxxhcal.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rerpivllud.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rfjuhbnlro.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rfwxcinshk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rklawjhbpv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rktrpsdlci.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rmlzgerevr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rmufsuogzn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rnfcjxynfa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rrrfjhugvb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rtpbawlmxr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ruhtnngrqv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rukyxomwcx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rvvpazsffd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/rxdoimqble.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ryxaqpfubf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/scbdenmaed.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/scrbqgpvzz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sfsayjgzrh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/shnsajrsow.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/siebfpwuhu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sjinmmbipg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sjkfxrlxxs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sjwywglgym.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sktpeppbkc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sngjsueuhs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/snlyjbnpgw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sodvtfqbpf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sqixhnilfm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/srfefmyjvt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sufvvwmbha.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/swsaoktwgi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sylnrepacf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/syuxttuyhm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/syxobtuucp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/sznkemeqro.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tejfudfgpq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/temeqbmzxu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/temjefwaas.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tgawasvbbr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tjuihawuqm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tjywwgftmv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/toinozytsp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tvhjcfnqtg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/txmnoyiyte.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/txnmkabufs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tyjpjpglgx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/tynfsthodx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ucthmsajay.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/udxqbhgvvx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uhakqelqri.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uhrqlmlclw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uoccaiathd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/upmgtackuf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uqvxjfpwdo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/usqqvxcjmg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uubgqnvfdl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uvrzaczrbx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/uxuvkrjhws.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vajkicalux.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vbcgoyxsvn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vdtsbqidjb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vhbbwdflyh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/viteugozpv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vizerpsvbz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vjljdfopjg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vmxfwxgdei.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vnlzxqwthl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/voawxrmqyl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vokrpfjpeb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vssmlqoiti.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vtunvalyji.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vurjckblge.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vvfszaosiv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/vwxednhlwz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wadvzjhwtw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/waucvvmtkq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wclvkepakb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wcqvzujamg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wcssbghcpc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wcvsqnplsk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wfzjxzhdkj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wixbuuzygv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wjhpisoeaj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wmoqzxddkb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wndursivcx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wnlubukrki.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wqysrieiqu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wvgviwnwob.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/wynotylpnm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xcruhaccxc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xdezcezszc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xhtppuyqdr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xitgdpzbxv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xjvxtuakyd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xljemofssi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xmkwsnuzyq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xphdfgmfmz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xrtvqhdibb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xugmhbetrw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/xxzefxwyku.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yarpxfqejd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yaxgpxhavq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ybbrkacebd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yhjlnisfel.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yhylappzid.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yietrwuncf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yiykshcbaz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yljecirelf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yllztsrwjw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ylxwcwhjjd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yoyhmxtrys.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ypbtpunjvm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yqhouqakbx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yronlutbgm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ystdtnetgj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ytddugrwph.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ytopzxrswu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ywauoonmlr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ywxpquomgt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yxadevzohx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yxirnfyijn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yxvmusxvcz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/yzuestxcbq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zbgssotnjm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zcxcmneefk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zfobicuigx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zfrrixsimm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zgbhzkditd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zgjosltkie.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ziipxxchai.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zmxeiipnqb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ztyuiqrhdk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/ztyvglkcsf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zuwwbbusgl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zxacihctqp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zyufpqvpyu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/test_videos/zzmgnglanj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aagfhgtpmv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aapnvogymq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/abarnvbtwb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/abofeumbvv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/abqwwspghj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/acifjvzvpm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/acqfdwsrhi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/acxnxvbsxk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/acxwigylke.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aczrgyricp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/adhsbajydo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/adohikbdaz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/adylbeequz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aelfnikyqj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aelzhcnwgf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aettqgevhz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aevrfsexku.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/afoovlsmtx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/agdkmztvby.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/agqphdxmwt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/agrmhtjdlk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ahbweevwpv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ahdbuwqxit.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ahfazfbntc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ahqqqilsxt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aipfdnwpoo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ajqslcypsw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ajwpjhrbcv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aklqzsddfl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aknbdpmgua.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aknmpoonls.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/akvmwkdyuv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/akxoopqjqz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/akzbnazxtz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aladcziidp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/alaijyygdv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/alninxcyhg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/altziddtxi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/alvgwypubw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/amaivqofda.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/amowujxmzc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/andaxzscny.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aneclqfpbt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/anpuvshzoo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aorjvbyxhw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/apatcsqejh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/apgjqzkoma.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/apogckdfrz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aqpnvjhuzw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/arkroixhey.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/arlmiizoob.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/arrhsnjqku.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/asaxgevnnp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/asdpeebotb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aslsvlvpth.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/asmpfjfzif.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/asvcrfdpnq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/atkdltyyen.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/atvmxvwyns.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/atxvxouljq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/atyntldecu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/atzdznmder.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aufmsmnoye.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/augtsuxpzc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avfitoutyn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avgiuextiz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avibnnhwhp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avmjormvsx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avnqydkqjj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avssvvsdhz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avtycwsgyb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avvdgsennp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/avywawptfc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/awhmfnnjih.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/awnwkrqibf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/awukslzjra.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/axczxisdtb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/axntxmycwd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/axoygtekut.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/axwgcsyphv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/axwovszumc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aybgughjxh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aybumesmpk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ayqvfdhslr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/aytzyidmgs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/azpuxunqyo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/azsmewqghg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bahdpoesir.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bbhpvrmbse.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bbhtdfuqxq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bbvgxeczei.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bchnbulevv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bctvsmddgq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bdbhekrrwo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bddjdhzfze.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bdgipnyobr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bdnaqemxmr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bdxuhamuqx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/beboztfcme.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bejhvclboh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/benmsfzfaz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/beyebyhrph.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bffwsjxghk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bgaogsjehq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bggsurpgpr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bghphrsfxf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bgmlwsoamc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bguwlyazau.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bgvhtpzknn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bgwmmujlmc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bhaaboftbc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bhbdugnurr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bhpwpydzpo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bhsluedavd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bilnggbxgu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bjjbwsqjir.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bjkmjilrxp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bjsmaqefoi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bkmdzhfzfh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bkvetcojbt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bkwxhglwct.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/blpchvmhxx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/blzydqdfem.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bmbbkwmxqj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bmehkyanbj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bmhvktyiwp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bmioepcpsx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bmjmjmbglm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bmjzrlszhi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bnbuonyoje.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bndybcqhfr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bnjcdrfuov.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bntlodcfeg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bofqajtwve.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/boovltmuwi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bopqhhalml.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bourlmzsio.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bpapbctoao.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bpwzipqtxf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bpxckdzddv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqdjzqhcft.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqeiblbxtl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqhtpqmmqp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqkdbcqjvb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqnymlsayl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqqpbzjgup.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bqtuuwzdtr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/brhalypwoo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/brvqtabyxj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/brwrlczjvi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bseamdrpbj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bsfmwclnqy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bsqgziaylx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btiysiskpf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btjlfpzbdu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btjwbtsgln.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btmsngnqhv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btohlidmru.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btugrnoton.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btunxncpjh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/btxlttbpkj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bulkxhhknf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bvgwelbeof.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bvzjkezkms.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bweezhfpzp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bwhlgysghg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bwipwzzxxu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bwuwstvsbw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bxzakyopjf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bydaidkpdp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/byfenovjnf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/byijojkdba.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/byofowlkki.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/byqzyxifza.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/byunigvnay.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/byyqectxqa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bzmdrafeex.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/bzythlfnhq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/caifxvsozs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/caqbrkogkb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cbbibzcoih.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cbltdtxglo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ccfoszqabv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ccmonzqfrz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cdaxixbosp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cdbsbdymzd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cdphtzqrvp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cdyakrxkia.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cepxysienc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cettndmvzl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ceymbecxnj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cferslmfwh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cffffbcywc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cfxkpiweqt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cfyduhpbps.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cglxirfaey.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cgvrgibpfo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/chtapglbcj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/chviwxsfhg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/chzieimrwu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ciyoudyhly.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cizlkenljw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ckbdwedgmc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ckjaibzfxa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ckkuyewywx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cknyxaqouy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cksanfsjhc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/clihsshdkq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/clrycekyst.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cmbzllswnl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cmxcfkrjiv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cnilkgvfei.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/coadfnerlk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cobjrlugvp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/covdcysmbi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cpjxareypw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cppdvdejkc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cprhtltsjp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cqfugiqupm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cqhngvpgyi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cqrskwiqng.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/crezycjqyk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/crktehraph.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/crzfebnfgb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cthdnahrkh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ctpqeykqdp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cttqtsjvgn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ctzmavwror.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/curpwogllm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cuzrgrbvil.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cvaksbpssm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cwbacdwrzo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cwqlvzefpg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cwrtyzndpx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cwsbspfzck.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cwwandrkus.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cxfujlvsuw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cxrfacemmq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cxttmymlbn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cyboodqqyr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cycacemkmt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cyclgfjdrv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/cyxlcuyznd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/czfunozvwp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/czkdanyadc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/czmqpxrqoh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dafhtipaml.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dakiztgtnw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dakqwktlbi.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dbhoxkblzx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dbhrpizyeq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dbnygxtwek.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dboxtiehng.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dbtbbhakdv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dbzcqmxzaj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dbzpcjntve.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dcamvmuors.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dcuiiorugd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ddepeddixj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ddhfabwpuz.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ddjggcasdw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ddpvuimigj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ddqccgmtka.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/degpbqvcay.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/deywhkarol.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/deyyistcrd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dfbpceeaox.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dgmevclvzy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dgxrqjdomn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dgzklxjmix.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhcndnuwta.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhcselezer.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhevettufk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhjmzhrcav.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhkwmjxwrn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhoqofwoxa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dhxctgyoqj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/diomeixhrg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/diopzaywor.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/diqraixiov.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/diuzrpqjli.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/djvtbgwdcc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/djvutyvaio.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/djxdyjopjd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dkdwxmtpuo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dkhlttuvmx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dkrvorliqc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dkuayagnmc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dkwjwbwgey.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dkzvdrzcnr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dlpoieqvfb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dlrsbscitn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dnexlwbcxq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dnhvalzvrt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dntkzzzcdh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dnyvfblxpm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/doanjploai.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dofusvhnib.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dozyddhild.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dptbnjnkdg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dptrzdvwpg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dqnyszdong.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dqppxmoqdl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dqqtjcryjv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dqswpjoepo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dqzreruvje.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/drcyabprvt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/drgjzlxzxj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/drsakwyvqv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/drtbksnpol.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dsdoseflas.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dsgpbgsrdm.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dsjbknkujw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dsndhujjjb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dtbpmdqvao.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dtocdfbwca.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dubiroskqn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dulanfulol.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/duvyaxbzvp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/duycddgtrl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/duzuusuajr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dvakowbgbt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dvumqqhoac.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dwediigjit.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dxbqjxrhin.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dxuliowugt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dxuplhwvig.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dzieklokdr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dzqwgqewhu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dzvyfiarrq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dzwkmcwkwl.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/dzyuwjkjui.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eahlqmfvtj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eajlrktemq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ebchwmwayp.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ebebgmtlcu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ebeknhudxq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ebkzwjgjhq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ebywfrmhtd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eckvhdusax.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ecnihjlfyt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ecujsjhscd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ecuvtoltue.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ecwaxgutkc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eczrseixwq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/edyncaijwx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eebrkicpry.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eebserckhh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eejswgycjc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eekozbeafq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eepezmygaq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eeyhxisdfh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/efdyrflcpg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/efwfxwwlbw.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/egbbcxcuqy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eggbjzxnmg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/egghxjjmfg.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehbnclaukr.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehccixxzoe.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehdkmxgtxh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehevsxtecd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehfiekigla.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehieahnhte.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ehtdtkmmli.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eiriyukqqy.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eivxffliio.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eiwopxzjfn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eixwxvxbbn.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ejkqesyvam.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ekcrtigpab.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ekhacizpah.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ekkdjkirzq.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/elginszwtk.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ellavthztb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/elvvackpjh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/emaalmsonj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/emfbhytfhc.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/emgjphonqb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/ensyyivobf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eoewqcpbgt.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eprybmbpba.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/epymyyiblu.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eqjscdagiv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eqnoqyfquo.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eqvuznuwsa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/erlvuvjsjf.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/erqgqacbqe.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/errocgcham.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/esckbnkkvb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/esgftaficx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/esnntzzajv.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/esxrvsgpvb.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/esyhwdfnxs.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/esyrimvzsa.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/etdcqxabww.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/etejaapnxh.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/etmcruaihe.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/etohcvnzbj.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eudeqjhdfd.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/eukvucdetx.mp4  \n",
            "  inflating: /content/drive/My Drive/deepfake_project/train_sample_videos/metadata.json  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Organize Dataset"
      ],
      "metadata": {
        "id": "A0IC7JwGcVeA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "dataset_path = \"/content/drive/My Drive/deepfake_project/train_sample_videos\"\n",
        "metadata_path = os.path.join(dataset_path, \"metadata.json\")\n",
        "\n",
        "print(\"Dataset directory exists:\", os.path.exists(dataset_path))\n",
        "print(\"Metadata file exists:\", os.path.exists(metadata_path))\n",
        "print(\"Dataset contents:\", os.listdir(dataset_path) if os.path.exists(dataset_path) else \"Not Found\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "31EeCbypjMMC",
        "outputId": "53c4b17f-3976-466a-f563-328c3fea0062"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset directory exists: True\n",
            "Metadata file exists: True\n",
            "Dataset contents: ['aagfhgtpmv.mp4', 'aapnvogymq.mp4', 'abarnvbtwb.mp4', 'abqwwspghj.mp4', 'acifjvzvpm.mp4', 'acqfdwsrhi.mp4', 'acxnxvbsxk.mp4', 'abofeumbvv.mp4', 'adylbeequz.mp4', 'acxwigylke.mp4', 'adhsbajydo.mp4', 'adohikbdaz.mp4', 'aczrgyricp.mp4', 'aelzhcnwgf.mp4', 'aettqgevhz.mp4', 'aevrfsexku.mp4', 'afoovlsmtx.mp4', 'aelfnikyqj.mp4', 'agdkmztvby.mp4', 'agqphdxmwt.mp4', 'agrmhtjdlk.mp4', 'ahbweevwpv.mp4', 'aipfdnwpoo.mp4', 'ahdbuwqxit.mp4', 'ahqqqilsxt.mp4', 'ahfazfbntc.mp4', 'ajwpjhrbcv.mp4', 'aknbdpmgua.mp4', 'aknmpoonls.mp4', 'ajqslcypsw.mp4', 'aklqzsddfl.mp4', 'aladcziidp.mp4', 'akzbnazxtz.mp4', 'akvmwkdyuv.mp4', 'alaijyygdv.mp4', 'akxoopqjqz.mp4', 'alninxcyhg.mp4', 'altziddtxi.mp4', 'amowujxmzc.mp4', 'andaxzscny.mp4', 'amaivqofda.mp4', 'alvgwypubw.mp4', 'aorjvbyxhw.mp4', 'anpuvshzoo.mp4', 'aneclqfpbt.mp4', 'arlmiizoob.mp4', 'apogckdfrz.mp4', 'aqpnvjhuzw.mp4', 'apgjqzkoma.mp4', 'arkroixhey.mp4', 'apatcsqejh.mp4', 'asdpeebotb.mp4', 'asvcrfdpnq.mp4', 'asaxgevnnp.mp4', 'arrhsnjqku.mp4', 'aslsvlvpth.mp4', 'asmpfjfzif.mp4', 'atvmxvwyns.mp4', 'atkdltyyen.mp4', 'atxvxouljq.mp4', 'atyntldecu.mp4', 'atzdznmder.mp4', 'aufmsmnoye.mp4', 'avgiuextiz.mp4', 'augtsuxpzc.mp4', 'avfitoutyn.mp4', 'avibnnhwhp.mp4', 'avssvvsdhz.mp4', 'avtycwsgyb.mp4', 'avvdgsennp.mp4', 'avmjormvsx.mp4', 'avnqydkqjj.mp4', 'axczxisdtb.mp4', 'avywawptfc.mp4', 'awukslzjra.mp4', 'awhmfnnjih.mp4', 'awnwkrqibf.mp4', 'axwovszumc.mp4', 'axwgcsyphv.mp4', 'axoygtekut.mp4', 'axntxmycwd.mp4', 'aybumesmpk.mp4', 'ayqvfdhslr.mp4', 'aytzyidmgs.mp4', 'aybgughjxh.mp4', 'bbhpvrmbse.mp4', 'azsmewqghg.mp4', 'azpuxunqyo.mp4', 'bahdpoesir.mp4', 'bddjdhzfze.mp4', 'bctvsmddgq.mp4', 'bbvgxeczei.mp4', 'bbhtdfuqxq.mp4', 'bdbhekrrwo.mp4', 'bchnbulevv.mp4', 'bdxuhamuqx.mp4', 'bdgipnyobr.mp4', 'bdnaqemxmr.mp4', 'beboztfcme.mp4', 'benmsfzfaz.mp4', 'beyebyhrph.mp4', 'bejhvclboh.mp4', 'bggsurpgpr.mp4', 'bgmlwsoamc.mp4', 'bghphrsfxf.mp4', 'bffwsjxghk.mp4', 'bguwlyazau.mp4', 'bgaogsjehq.mp4', 'bgwmmujlmc.mp4', 'bhaaboftbc.mp4', 'bgvhtpzknn.mp4', 'bhpwpydzpo.mp4', 'bhbdugnurr.mp4', 'bhsluedavd.mp4', 'bjjbwsqjir.mp4', 'bjkmjilrxp.mp4', 'bilnggbxgu.mp4', 'bjsmaqefoi.mp4', 'bkwxhglwct.mp4', 'bmbbkwmxqj.mp4', 'blzydqdfem.mp4', 'blpchvmhxx.mp4', 'bkmdzhfzfh.mp4', 'bkvetcojbt.mp4', 'bmioepcpsx.mp4', 'bmjzrlszhi.mp4', 'bmehkyanbj.mp4', 'bmjmjmbglm.mp4', 'bmhvktyiwp.mp4', 'bnbuonyoje.mp4', 'bntlodcfeg.mp4', 'bofqajtwve.mp4', 'bndybcqhfr.mp4', 'bnjcdrfuov.mp4', 'bourlmzsio.mp4', 'boovltmuwi.mp4', 'bopqhhalml.mp4', 'bpapbctoao.mp4', 'bqeiblbxtl.mp4', 'bqhtpqmmqp.mp4', 'bpxckdzddv.mp4', 'bqkdbcqjvb.mp4', 'bqdjzqhcft.mp4', 'bpwzipqtxf.mp4', 'brvqtabyxj.mp4', 'brhalypwoo.mp4', 'bqnymlsayl.mp4', 'bqqpbzjgup.mp4', 'bqtuuwzdtr.mp4', 'bsqgziaylx.mp4', 'brwrlczjvi.mp4', 'btiysiskpf.mp4', 'bseamdrpbj.mp4', 'bsfmwclnqy.mp4', 'btjwbtsgln.mp4', 'btmsngnqhv.mp4', 'btjlfpzbdu.mp4', 'btugrnoton.mp4', 'btohlidmru.mp4', 'bulkxhhknf.mp4', 'btunxncpjh.mp4', 'btxlttbpkj.mp4', 'bwipwzzxxu.mp4', 'bvgwelbeof.mp4', 'bweezhfpzp.mp4', 'bwhlgysghg.mp4', 'bvzjkezkms.mp4', 'bwuwstvsbw.mp4', 'bydaidkpdp.mp4', 'byfenovjnf.mp4', 'bxzakyopjf.mp4', 'byijojkdba.mp4', 'byofowlkki.mp4', 'byunigvnay.mp4', 'byqzyxifza.mp4', 'bzythlfnhq.mp4', 'caifxvsozs.mp4', 'cbbibzcoih.mp4', 'byyqectxqa.mp4', 'bzmdrafeex.mp4', 'caqbrkogkb.mp4', 'ccmonzqfrz.mp4', 'cbltdtxglo.mp4', 'cdaxixbosp.mp4', 'ccfoszqabv.mp4', 'cdbsbdymzd.mp4', 'cepxysienc.mp4', 'cettndmvzl.mp4', 'cdyakrxkia.mp4', 'cdphtzqrvp.mp4', 'ceymbecxnj.mp4', 'cferslmfwh.mp4', 'cffffbcywc.mp4', 'cfxkpiweqt.mp4', 'cfyduhpbps.mp4', 'chtapglbcj.mp4', 'cgvrgibpfo.mp4', 'chviwxsfhg.mp4', 'cglxirfaey.mp4', 'cizlkenljw.mp4', 'ckkuyewywx.mp4', 'ckbdwedgmc.mp4', 'chzieimrwu.mp4', 'ckjaibzfxa.mp4', 'ciyoudyhly.mp4', 'clrycekyst.mp4', 'cksanfsjhc.mp4', 'cmbzllswnl.mp4', 'clihsshdkq.mp4', 'cknyxaqouy.mp4', 'coadfnerlk.mp4', 'cobjrlugvp.mp4', 'covdcysmbi.mp4', 'cmxcfkrjiv.mp4', 'cnilkgvfei.mp4', 'cpjxareypw.mp4', 'cppdvdejkc.mp4', 'cqhngvpgyi.mp4', 'cqfugiqupm.mp4', 'cprhtltsjp.mp4', 'crktehraph.mp4', 'cqrskwiqng.mp4', 'crzfebnfgb.mp4', 'crezycjqyk.mp4', 'cthdnahrkh.mp4', 'ctzmavwror.mp4', 'cttqtsjvgn.mp4', 'curpwogllm.mp4', 'ctpqeykqdp.mp4', 'cwbacdwrzo.mp4', 'cvaksbpssm.mp4', 'cwqlvzefpg.mp4', 'cuzrgrbvil.mp4', 'cwrtyzndpx.mp4', 'cwwandrkus.mp4', 'cxfujlvsuw.mp4', 'cxrfacemmq.mp4', 'cwsbspfzck.mp4', 'cyclgfjdrv.mp4', 'cyxlcuyznd.mp4', 'cyboodqqyr.mp4', 'cycacemkmt.mp4', 'cxttmymlbn.mp4', 'czfunozvwp.mp4', 'dakqwktlbi.mp4', 'dafhtipaml.mp4', 'czmqpxrqoh.mp4', 'dakiztgtnw.mp4', 'dbhoxkblzx.mp4', 'czkdanyadc.mp4', 'dbzcqmxzaj.mp4', 'dboxtiehng.mp4', 'dbtbbhakdv.mp4', 'dbnygxtwek.mp4', 'dbhrpizyeq.mp4', 'ddhfabwpuz.mp4', 'dcamvmuors.mp4', 'ddepeddixj.mp4', 'dcuiiorugd.mp4', 'dbzpcjntve.mp4', 'ddjggcasdw.mp4', 'ddpvuimigj.mp4', 'ddqccgmtka.mp4', 'deywhkarol.mp4', 'degpbqvcay.mp4', 'dgzklxjmix.mp4', 'dgxrqjdomn.mp4', 'dgmevclvzy.mp4', 'deyyistcrd.mp4', 'dfbpceeaox.mp4', 'dhcndnuwta.mp4', 'dhcselezer.mp4', 'dhjmzhrcav.mp4', 'dhevettufk.mp4', 'dhxctgyoqj.mp4', 'dhoqofwoxa.mp4', 'diopzaywor.mp4', 'diomeixhrg.mp4', 'dhkwmjxwrn.mp4', 'diqraixiov.mp4', 'djvtbgwdcc.mp4', 'djvutyvaio.mp4', 'diuzrpqjli.mp4', 'dkhlttuvmx.mp4', 'djxdyjopjd.mp4', 'dkuayagnmc.mp4', 'dkdwxmtpuo.mp4', 'dkrvorliqc.mp4', 'dlpoieqvfb.mp4', 'dkwjwbwgey.mp4', 'dkzvdrzcnr.mp4', 'dlrsbscitn.mp4', 'dnexlwbcxq.mp4', 'dntkzzzcdh.mp4', 'dnhvalzvrt.mp4', 'dozyddhild.mp4', 'dptbnjnkdg.mp4', 'dnyvfblxpm.mp4', 'dofusvhnib.mp4', 'doanjploai.mp4', 'dptrzdvwpg.mp4', 'dqnyszdong.mp4', 'dqqtjcryjv.mp4', 'dqppxmoqdl.mp4', 'dqswpjoepo.mp4', 'drcyabprvt.mp4', 'dqzreruvje.mp4', 'dsdoseflas.mp4', 'dsgpbgsrdm.mp4', 'drsakwyvqv.mp4', 'drtbksnpol.mp4', 'drgjzlxzxj.mp4', 'dubiroskqn.mp4', 'dulanfulol.mp4', 'dsjbknkujw.mp4', 'dsndhujjjb.mp4', 'dtbpmdqvao.mp4', 'dtocdfbwca.mp4', 'duzuusuajr.mp4', 'dvakowbgbt.mp4', 'duycddgtrl.mp4', 'duvyaxbzvp.mp4', 'dxbqjxrhin.mp4', 'dxuliowugt.mp4', 'dxuplhwvig.mp4', 'dvumqqhoac.mp4', 'dwediigjit.mp4', 'dzyuwjkjui.mp4', 'dzvyfiarrq.mp4', 'dzieklokdr.mp4', 'dzqwgqewhu.mp4', 'dzwkmcwkwl.mp4', 'ebchwmwayp.mp4', 'ebebgmtlcu.mp4', 'ebeknhudxq.mp4', 'eahlqmfvtj.mp4', 'eajlrktemq.mp4', 'ebkzwjgjhq.mp4', 'eckvhdusax.mp4', 'ecuvtoltue.mp4', 'ebywfrmhtd.mp4', 'ecnihjlfyt.mp4', 'ecujsjhscd.mp4', 'eczrseixwq.mp4', 'edyncaijwx.mp4', 'ecwaxgutkc.mp4', 'eebrkicpry.mp4', 'eebserckhh.mp4', 'eepezmygaq.mp4', 'efdyrflcpg.mp4', 'eekozbeafq.mp4', 'efwfxwwlbw.mp4', 'eeyhxisdfh.mp4', 'eejswgycjc.mp4', 'eggbjzxnmg.mp4', 'egbbcxcuqy.mp4', 'egghxjjmfg.mp4', 'ehbnclaukr.mp4', 'ehccixxzoe.mp4', 'ehdkmxgtxh.mp4', 'ehfiekigla.mp4', 'ehieahnhte.mp4', 'ehevsxtecd.mp4', 'ehtdtkmmli.mp4', 'eivxffliio.mp4', 'eiriyukqqy.mp4', 'eixwxvxbbn.mp4', 'eiwopxzjfn.mp4', 'ejkqesyvam.mp4', 'ekkdjkirzq.mp4', 'ekhacizpah.mp4', 'ekcrtigpab.mp4', 'ellavthztb.mp4', 'elvvackpjh.mp4', 'elginszwtk.mp4', 'emfbhytfhc.mp4', 'emaalmsonj.mp4', 'ensyyivobf.mp4', 'eoewqcpbgt.mp4', 'emgjphonqb.mp4', 'eprybmbpba.mp4', 'epymyyiblu.mp4', 'erlvuvjsjf.mp4', 'eqjscdagiv.mp4', 'erqgqacbqe.mp4', 'eqnoqyfquo.mp4', 'eqvuznuwsa.mp4', 'errocgcham.mp4', 'esyhwdfnxs.mp4', 'esckbnkkvb.mp4', 'esyrimvzsa.mp4', 'esgftaficx.mp4', 'esxrvsgpvb.mp4', 'esnntzzajv.mp4', 'etdcqxabww.mp4', 'etejaapnxh.mp4', 'etmcruaihe.mp4', 'etohcvnzbj.mp4', 'eudeqjhdfd.mp4', 'metadata.json', 'eukvucdetx.mp4']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import json\n",
        "import shutil\n",
        "\n",
        "#loading metadata\n",
        "with open(metadata_path, \"r\") as f:\n",
        "    metadata = json.load(f)\n",
        "\n",
        "#gathering real and fake video paths:\n",
        "all_real_videos = [os.path.join(dataset_path, video) for video, info in metadata.items() if info[\"label\"] == \"REAL\"]\n",
        "all_fake_videos = [os.path.join(dataset_path, video) for video, info in metadata.items() if info[\"label\"] == \"FAKE\"]\n",
        "\n",
        "#creating a subset of 20 training, 5 validation, and 5 testing for each class\n",
        "train_real = all_real_videos[:20]\n",
        "val_real = all_real_videos[20:25]\n",
        "test_real = all_real_videos[25:30]\n",
        "\n",
        "train_fake = all_fake_videos[:20]\n",
        "val_fake = all_fake_videos[20:25]\n",
        "test_fake = all_fake_videos[25:30]\n"
      ],
      "metadata": {
        "id": "VRZqLFr2cZYt"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def check_overlap(set1, set2, set3, set_name1, set_name2, set_name3):\n",
        "    # Check for overlaps between each pair of sets\n",
        "    overlap1_2 = set(set1) & set(set2)\n",
        "    overlap1_3 = set(set1) & set(set3)\n",
        "    overlap2_3 = set(set2) & set(set3)\n",
        "\n",
        "    # Print results\n",
        "    if overlap1_2:\n",
        "        print(f\"Overlap between {set_name1} and {set_name2}: {overlap1_2}\")\n",
        "    else:\n",
        "        print(f\"No overlap between {set_name1} and {set_name2}.\")\n",
        "\n",
        "    if overlap1_3:\n",
        "        print(f\"Overlap between {set_name1} and {set_name3}: {overlap1_3}\")\n",
        "    else:\n",
        "        print(f\"No overlap between {set_name1} and {set_name3}.\")\n",
        "\n",
        "    if overlap2_3:\n",
        "        print(f\"Overlap between {set_name2} and {set_name3}: {overlap2_3}\")\n",
        "    else:\n",
        "        print(f\"No overlap between {set_name2} and {set_name3}.\")\n",
        "\n",
        "# Check for overlaps between real video sets\n",
        "print(\"Checking overlap for REAL videos:\")\n",
        "check_overlap(train_real, val_real, test_real, \"train_real\", \"val_real\", \"test_real\")\n",
        "\n",
        "# Check for overlaps between fake video sets\n",
        "print(\"\\nChecking overlap for FAKE videos:\")\n",
        "check_overlap(train_fake, val_fake, test_fake, \"train_fake\", \"val_fake\", \"test_fake\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6IFdGnNC7VUJ",
        "outputId": "273da063-2248-4e50-da41-b8b02e4f47dd"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Checking overlap for REAL videos:\n",
            "No overlap between train_real and val_real.\n",
            "No overlap between train_real and test_real.\n",
            "No overlap between val_real and test_real.\n",
            "\n",
            "Checking overlap for FAKE videos:\n",
            "No overlap between train_fake and val_fake.\n",
            "No overlap between train_fake and test_fake.\n",
            "No overlap between val_fake and test_fake.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# copying subset files to Google Drive\n",
        "for video in train_real + val_real + test_real:\n",
        "    shutil.copy(video, small_real_path)\n",
        "for video in train_fake + val_fake + test_fake:\n",
        "    shutil.copy(video, small_fake_path)\n",
        "\n",
        "print(f\"Training set: {len(train_real) + len(train_fake)} videos\")\n",
        "print(f\"Validation set: {len(val_real) + len(val_fake)} videos\")\n",
        "print(f\"Testing set: {len(test_real) + len(test_fake)} videos\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NjTR8WNCkyI4",
        "outputId": "b9d4e62a-1dad-4b78-c24b-1a587dbb8a51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set: 40 videos\n",
            "Validation set: 10 videos\n",
            "Testing set: 10 videos\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Preprocessing Videos: Face Detection"
      ],
      "metadata": {
        "id": "Q-fDKY9glU8s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pip install retina-face\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WTqOJPzUBUjO",
        "outputId": "b8f4dbdd-9662-433c-dc8c-fe7c5047f174"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting retina-face\n",
            "  Downloading retina_face-0.0.17-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.10/dist-packages (from retina-face) (1.26.4)\n",
            "Requirement already satisfied: gdown>=3.10.1 in /usr/local/lib/python3.10/dist-packages (from retina-face) (5.2.0)\n",
            "Requirement already satisfied: Pillow>=5.2.0 in /usr/local/lib/python3.10/dist-packages (from retina-face) (11.0.0)\n",
            "Requirement already satisfied: opencv-python>=3.4.4 in /usr/local/lib/python3.10/dist-packages (from retina-face) (4.10.0.84)\n",
            "Requirement already satisfied: tensorflow>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from retina-face) (2.17.1)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown>=3.10.1->retina-face) (4.12.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from gdown>=3.10.1->retina-face) (3.16.1)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from gdown>=3.10.1->retina-face) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from gdown>=3.10.1->retina-face) (4.67.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (24.3.25)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (3.12.1)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (0.4.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (4.25.5)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (1.17.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (1.68.1)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (2.17.1)\n",
            "Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (3.5.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=1.9.0->retina-face) (0.37.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow>=1.9.0->retina-face) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow>=1.9.0->retina-face) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow>=1.9.0->retina-face) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow>=1.9.0->retina-face) (0.13.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown>=3.10.1->retina-face) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown>=3.10.1->retina-face) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown>=3.10.1->retina-face) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown>=3.10.1->retina-face) (2024.12.14)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow>=1.9.0->retina-face) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow>=1.9.0->retina-face) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow>=1.9.0->retina-face) (3.1.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown>=3.10.1->retina-face) (2.6)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown>=3.10.1->retina-face) (1.7.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow>=1.9.0->retina-face) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow>=1.9.0->retina-face) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow>=1.9.0->retina-face) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow>=1.9.0->retina-face) (0.1.2)\n",
            "Downloading retina_face-0.0.17-py3-none-any.whl (25 kB)\n",
            "Installing collected packages: retina-face\n",
            "Successfully installed retina-face-0.0.17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from retinaface import RetinaFace\n",
        "from skimage.metrics import structural_similarity as ssim\n",
        "import cv2\n",
        "import os\n",
        "import numpy as np\n",
        "from tqdm import tqdm\n"
      ],
      "metadata": {
        "id": "yl0vNva7Bj4_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_frames_with_faces(video_path, output_dir, detector=RetinaFace, frame_skip=2):\n",
        "    os.makedirs(output_dir, exist_ok=True)\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n",
        "    frame_idx = 0\n",
        "\n",
        "    while frame_idx < frame_count:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "\n",
        "        if frame_idx % frame_skip == 0:\n",
        "            faces = detector.detect_faces(frame)\n",
        "            for i, face in enumerate(faces.values()):\n",
        "                x, y, w, h = face['facial_area']\n",
        "                cropped_face = frame[y:h, x:w]\n",
        "                output_path = os.path.join(output_dir, f\"frame_{frame_idx:04d}_{i}.jpg\")\n",
        "                cv2.imwrite(output_path, cropped_face)\n",
        "\n",
        "        frame_idx += 1\n",
        "    cap.release()\n",
        "\n",
        "def process_videos(video_list, output_root):\n",
        "    for video_path in tqdm(video_list):\n",
        "        video_name = os.path.basename(video_path).split('.')[0]\n",
        "        output_dir = os.path.join(output_root, video_name)\n",
        "        extract_frames_with_faces(video_path, output_dir)\n",
        "\n",
        "# Paths to Subset Videos\n",
        "video_list = train_real + train_fake + val_real + val_fake\n",
        "output_root = \"/content/drive/My Drive/deepfake_project/face_crops\"\n",
        "process_videos(video_list, output_root)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0GN1jKQ9BugJ",
        "outputId": "d125fb5f-d2bc-4d95-efa9-10137656aaeb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r  0%|          | 0/50 [00:00<?, ?it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25-01-01 19:13:06 - Directory /root/.deepface created\n",
            "25-01-01 19:13:06 - Directory /root/.deepface/weights created\n",
            "25-01-01 19:13:06 - retinaface.h5 will be downloaded from the url https://github.com/serengil/deepface_models/releases/download/v1.0/retinaface.h5\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://github.com/serengil/deepface_models/releases/download/v1.0/retinaface.h5\n",
            "To: /root/.deepface/weights/retinaface.h5\n",
            "\n",
            "  0%|          | 0.00/119M [00:00<?, ?B/s]\u001b[A\n",
            "  8%|▊         | 9.96M/119M [00:00<00:01, 98.8MB/s]\u001b[A\n",
            " 26%|██▌       | 30.4M/119M [00:00<00:00, 161MB/s] \u001b[A\n",
            " 45%|████▍     | 53.0M/119M [00:00<00:00, 189MB/s]\u001b[A\n",
            " 67%|██████▋   | 79.2M/119M [00:00<00:00, 217MB/s]\u001b[A\n",
            "100%|██████████| 119M/119M [00:00<00:00, 204MB/s]\n",
            "100%|██████████| 50/50 [13:15<00:00, 15.91s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Defining Dataset with Updated Augmentations"
      ],
      "metadata": {
        "id": "zFoLpkfwKgaf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install albumentations"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNZdMQI1Ku9G",
        "outputId": "fb5f7068-c1a3-4c42-af1d-b218a38f3da0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: albumentations in /usr/local/lib/python3.10/dist-packages (1.4.24)\n",
            "Requirement already satisfied: numpy>=1.24.4 in /usr/local/lib/python3.10/dist-packages (from albumentations) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from albumentations) (1.13.1)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from albumentations) (6.0.2)\n",
            "Requirement already satisfied: pydantic>=2.9.2 in /usr/local/lib/python3.10/dist-packages (from albumentations) (2.10.3)\n",
            "Requirement already satisfied: albucore==0.0.23 in /usr/local/lib/python3.10/dist-packages (from albumentations) (0.0.23)\n",
            "Requirement already satisfied: opencv-python-headless>=4.9.0.80 in /usr/local/lib/python3.10/dist-packages (from albumentations) (4.10.0.84)\n",
            "Requirement already satisfied: stringzilla>=3.10.4 in /usr/local/lib/python3.10/dist-packages (from albucore==0.0.23->albumentations) (3.11.1)\n",
            "Requirement already satisfied: simsimd>=5.9.2 in /usr/local/lib/python3.10/dist-packages (from albucore==0.0.23->albumentations) (6.2.1)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.9.2->albumentations) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.1 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.9.2->albumentations) (2.27.1)\n",
            "Requirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.9.2->albumentations) (4.12.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Paths to Subset Videos\n",
        "video_list = train_real + train_fake + val_real + val_fake\n"
      ],
      "metadata": {
        "id": "0SCXx7AI7izI"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate Frames Based on Metadata\n",
        "real_crops = []\n",
        "fake_crops = []\n",
        "for video_path in video_list:\n",
        "    video_name = os.path.basename(video_path).split('.')[0]\n",
        "    label = 0 if video_path in train_real + val_real else 1  # 0 for real, 1 for fake\n",
        "    crop_dir = os.path.join(output_root, video_name)\n",
        "\n",
        "    if label == 0:\n",
        "        real_crops.append(crop_dir)\n",
        "    else:\n",
        "        fake_crops.append(crop_dir)\n"
      ],
      "metadata": {
        "id": "MMr1rVP2adeX"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from albumentations import Compose, ImageCompression, GaussNoise, GaussianBlur, HorizontalFlip, PadIfNeeded, OneOf, RandomBrightnessContrast, FancyPCA, HueSaturationValue, ToGray, ShiftScaleRotate, Normalize\n",
        "from albumentations.pytorch import ToTensorV2\n",
        "import torch\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import cv2\n",
        "import os\n"
      ],
      "metadata": {
        "id": "EtC4LwudKje6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "83d30dd3-e036-49f3-f4f5-81746b3ecb63"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 1.4.24 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\n",
            "  check_for_updates()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from albumentations import Resize\n",
        "def create_train_transforms(size=300):\n",
        "    return Compose([\n",
        "        Resize(size, size),  # Ensure all images are resized to 300x300\n",
        "        ImageCompression(quality_lower=60, quality_upper=100, p=0.3),\n",
        "        GaussNoise(p=0.1),\n",
        "        GaussianBlur(blur_limit=3, p=0.05),\n",
        "        HorizontalFlip(p=0.5),\n",
        "        PadIfNeeded(min_height=size, min_width=size, border_mode=cv2.BORDER_CONSTANT, value=0, p=1),\n",
        "        OneOf([\n",
        "            RandomBrightnessContrast(p=0.5), FancyPCA(p=0.2), HueSaturationValue(p=0.2)\n",
        "        ], p=0.7),\n",
        "        ToGray(p=0.1),\n",
        "        ShiftScaleRotate(shift_limit=0.05, scale_limit=0.1, rotate_limit=5, border_mode=cv2.BORDER_CONSTANT, value=0, p=0.3),\n",
        "        Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n",
        "        ToTensorV2()\n",
        "    ])\n",
        "\n",
        "def create_val_transforms(size=300):\n",
        "    return Compose([\n",
        "        Resize(size, size),  # Ensure all images are resized to 300x300\n",
        "        PadIfNeeded(min_height=size, min_width=size, border_mode=cv2.BORDER_CONSTANT, value=0, p=1),\n",
        "        Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n",
        "        ToTensorV2()\n",
        "    ])\n"
      ],
      "metadata": {
        "id": "4y646NKIKmJt"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Update Dataset Class to Use Extracted Frames\n",
        "class DeepFakeDataset(torch.utils.data.Dataset):\n",
        "    def __init__(self, root_dirs, labels, transforms=None):\n",
        "        self.paths = []\n",
        "        self.labels = []\n",
        "        self.transforms = transforms\n",
        "\n",
        "        # Gather all frame paths and their labels\n",
        "        for root_dir, label in zip(root_dirs, labels):\n",
        "            if os.path.exists(root_dir):\n",
        "                for frame_path in sorted(os.listdir(root_dir)):\n",
        "                    self.paths.append(os.path.join(root_dir, frame_path))\n",
        "                    self.labels.append(label)\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.paths)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        image_path = self.paths[idx]\n",
        "        label = self.labels[idx]\n",
        "\n",
        "        image = cv2.imread(image_path)\n",
        "        if image is None:\n",
        "            raise FileNotFoundError(f\"Image not found: {image_path}\")\n",
        "\n",
        "        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n",
        "        if self.transforms:\n",
        "            image = self.transforms(image=image)['image']\n",
        "\n",
        "        return image, torch.tensor(label, dtype=torch.float)\n"
      ],
      "metadata": {
        "id": "KmPot2tXQWKL"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate REAL crops for training and validation\n",
        "train_real_crops = real_crops[:len(train_real)]  # Use the first `len(train_real)` for training\n",
        "val_real_crops = real_crops[len(train_real):]    # Use the rest for validation\n",
        "\n",
        "# Separate FAKE crops for training and validation\n",
        "train_fake_crops = fake_crops[:len(train_fake)]  # Use the first `len(train_fake)` for training\n",
        "val_fake_crops = fake_crops[len(train_fake):]    # Use the rest for validation\n",
        "\n",
        "# Combine to create training and validation datasets\n",
        "train_crops = train_real_crops + train_fake_crops\n",
        "train_labels = [0] * len(train_real_crops) + [1] * len(train_fake_crops)\n",
        "\n",
        "val_crops = val_real_crops + val_fake_crops\n",
        "val_labels = [0] * len(val_real_crops) + [1] * len(val_fake_crops)\n"
      ],
      "metadata": {
        "id": "vcXKi0j7aDz7"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Training Set: {len(train_crops)} crops, {len(train_labels)} labels\")\n",
        "print(f\"Validation Set: {len(val_crops)} crops, {len(val_labels)} labels\")\n",
        "\n",
        "# Optional: Check overlap between train and validation crops\n",
        "overlap = set(train_crops) & set(val_crops)\n",
        "if overlap:\n",
        "    print(f\"Overlap detected in train and validation crops: {overlap}\")\n",
        "else:\n",
        "    print(\"No overlap between train and validation crops.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UkYeLt3Q8aXK",
        "outputId": "03be17f2-e986-48e1-c92d-44540c06a5ff"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Set: 40 crops, 40 labels\n",
            "Validation Set: 10 crops, 10 labels\n",
            "No overlap between train and validation crops.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_transforms = create_train_transforms()\n",
        "val_transforms = create_val_transforms()\n",
        "train_dataset = DeepFakeDataset(root_dirs=train_crops, labels=train_labels, transforms=train_transforms)\n",
        "val_dataset = DeepFakeDataset(root_dirs=val_crops, labels=val_labels, transforms=val_transforms)\n"
      ],
      "metadata": {
        "id": "95IedS8TZRHg"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create DataLoaders\n",
        "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False)\n"
      ],
      "metadata": {
        "id": "hJL-vyhAaqTz"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Training the Model"
      ],
      "metadata": {
        "id": "oQRxIUEZMYsw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import timm\n",
        "from torch import nn, optim\n"
      ],
      "metadata": {
        "id": "8tf3_p_3Ma8r"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = timm.create_model('tf_efficientnet_b4_ns', pretrained=True, num_classes=1)\n",
        "model = model.cuda()\n"
      ],
      "metadata": {
        "id": "9JohVjjvMe_R"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Loss and optimizer\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "optimizer = optim.AdamW(model.parameters(), lr=1e-4)\n"
      ],
      "metadata": {
        "id": "cegIs5ZMM-HC"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Refined overlap check function\n",
        "def check_overlap(set1, set2, name1=\"Set1\", name2=\"Set2\", check_labels=False):\n",
        "    overlap = set(set1) & set(set2)\n",
        "    if overlap:\n",
        "        if check_labels:\n",
        "            print(f\"Labels overlap between {name1} and {name2}: {overlap}\")\n",
        "        else:\n",
        "            print(f\"Overlap detected between {name1} and {name2}:\")\n",
        "            for item in overlap:\n",
        "                print(f\" - {item}\")\n",
        "            print(f\"Total Overlap: {len(overlap)}\")\n",
        "    else:\n",
        "        print(f\"No overlap detected between {name1} and {name2}.\")\n",
        "\n",
        "# Check crops\n",
        "check_overlap(train_crops, val_crops, name1=\"Train Crops\", name2=\"Validation Crops\")\n",
        "\n",
        "# Check labels (optional)\n",
        "check_overlap(train_labels, val_labels, name1=\"Train Labels\", name2=\"Validation Labels\", check_labels=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "McpKAtA-ER8F",
        "outputId": "fc13bb21-165e-4801-a3be-7dfff307bf70"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No overlap detected between Train Crops and Validation Crops.\n",
            "Labels overlap between Train Labels and Validation Labels: {0, 1}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to check overlap between crop names\n",
        "def check_crop_name_overlap(train_crops, val_crops):\n",
        "    # Extract crop names (basename of the path)\n",
        "    train_crop_names = set([os.path.basename(crop) for crop in train_crops])\n",
        "    val_crop_names = set([os.path.basename(crop) for crop in val_crops])\n",
        "\n",
        "    # Find overlap\n",
        "    overlap = train_crop_names & val_crop_names\n",
        "    if overlap:\n",
        "        print(f\"Overlap detected in crop names between training and validation sets:\")\n",
        "        for name in overlap:\n",
        "            print(f\" - {name}\")\n",
        "        print(f\"Total Overlap: {len(overlap)}\")\n",
        "    else:\n",
        "        print(\"No overlap detected in crop names between training and validation sets.\")\n",
        "\n",
        "# Example Usage\n",
        "check_crop_name_overlap(train_crops, val_crops)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g8YCAEyKExOj",
        "outputId": "a0537d90-a769-4506-9638-42691245cf6c"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No overlap detected in crop names between training and validation sets.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm import tqdm\n",
        "\n",
        "for epoch in range(10):\n",
        "    model.train()\n",
        "    train_loss = 0\n",
        "    correct = 0  # For accuracy calculation\n",
        "    total = 0    # Total samples processed\n",
        "\n",
        "    with tqdm(total=len(train_loader), desc=f\"Epoch {epoch+1}/{10}\", unit=\"batch\") as pbar:\n",
        "        for images, labels in train_loader:\n",
        "            images, labels = images.cuda(), labels.cuda().unsqueeze(1)\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(images)\n",
        "\n",
        "            # Calculate loss\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            # Update metrics\n",
        "            train_loss += loss.item()\n",
        "            predictions = (outputs > 0).float()  # Convert logits to binary predictions\n",
        "            correct += (predictions == labels).sum().item()\n",
        "            total += labels.size(0)\n",
        "\n",
        "            # Update progress bar\n",
        "            pbar.set_postfix(loss=f\"{loss.item():.4f}\")\n",
        "            pbar.update(1)\n",
        "\n",
        "    # Calculate average log loss and accuracy\n",
        "    epoch_train_loss = train_loss / len(train_loader)\n",
        "    epoch_train_accuracy = correct / total * 100\n",
        "\n",
        "    print(f\"Epoch {epoch+1}, Train Loss (Log Loss): {epoch_train_loss:.4f}, Train Accuracy: {epoch_train_accuracy:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CugGg4JMNBY3",
        "outputId": "9f650dff-34ef-4161-b843-e0cb8d103e0e"
      },
      "execution_count": 37,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10: 100%|██████████| 393/393 [02:03<00:00,  3.19batch/s, loss=0.0832]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1, Train Loss (Log Loss): 0.0782, Train Accuracy: 97.40%\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10: 100%|██████████| 393/393 [02:00<00:00,  3.27batch/s, loss=0.0000]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 2, Train Loss (Log Loss): 0.0562, Train Accuracy: 98.06%\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10: 100%|██████████| 393/393 [01:57<00:00,  3.34batch/s, loss=0.0001]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 3, Train Loss (Log Loss): 0.0425, Train Accuracy: 98.60%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10: 100%|██████████| 393/393 [01:58<00:00,  3.31batch/s, loss=0.0024]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 4, Train Loss (Log Loss): 0.0317, Train Accuracy: 99.04%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10: 100%|██████████| 393/393 [01:58<00:00,  3.33batch/s, loss=0.0614]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 5, Train Loss (Log Loss): 0.0144, Train Accuracy: 99.49%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10: 100%|██████████| 393/393 [02:00<00:00,  3.27batch/s, loss=0.0000]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 6, Train Loss (Log Loss): 0.0172, Train Accuracy: 99.43%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10: 100%|██████████| 393/393 [02:01<00:00,  3.25batch/s, loss=0.4821]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 7, Train Loss (Log Loss): 0.0154, Train Accuracy: 99.44%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10: 100%|██████████| 393/393 [02:00<00:00,  3.26batch/s, loss=0.0000]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 8, Train Loss (Log Loss): 0.0247, Train Accuracy: 99.20%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9/10: 100%|██████████| 393/393 [01:59<00:00,  3.28batch/s, loss=0.0120]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 9, Train Loss (Log Loss): 0.0240, Train Accuracy: 99.33%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10/10: 100%|██████████| 393/393 [02:00<00:00,  3.27batch/s, loss=0.0000]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 10, Train Loss (Log Loss): 0.0204, Train Accuracy: 99.30%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Saving and Evaluating the Model"
      ],
      "metadata": {
        "id": "mATf6EszdSgl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import torch\n",
        "checkpoints_dir = \"/content/drive/My Drive/deepfake_project/checkpoints\"\n",
        "os.makedirs(checkpoints_dir, exist_ok=True)\n",
        "torch.save(model.state_dict(), f\"{checkpoints_dir}/efficientnet_b4.pth\")\n"
      ],
      "metadata": {
        "id": "UUv5-vAIdVVy"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate on validation set\n",
        "import timm\n",
        "model = timm.create_model('tf_efficientnet_b4_ns', pretrained=False, num_classes=1)\n",
        "model.load_state_dict(torch.load(f\"{checkpoints_dir}/efficientnet_b4.pth\"))\n",
        "model = model.cuda()\n",
        "model.eval()\n",
        "all_labels = []\n",
        "all_preds = []\n",
        "val_loss = 0\n",
        "with torch.no_grad():\n",
        "    for images, labels in val_loader:\n",
        "        images, labels = images.cuda(), labels.cuda()\n",
        "        outputs = model(images)\n",
        "        preds = torch.sigmoid(outputs).cpu().numpy()\n",
        "        all_preds.extend(preds)\n",
        "        all_labels.extend(labels.cpu().numpy())\n"
      ],
      "metadata": {
        "id": "A_ks4cUgdWg7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2e8f1144-b395-48c4-8142-9e28708dd20f"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-39-e4497a34e48b>:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
            "  model.load_state_dict(torch.load(f\"{checkpoints_dir}/efficientnet_b4.pth\"))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Convert predictions and labels to numpy arrays\n",
        "all_preds = np.array(all_preds).ravel()\n",
        "all_labels = np.array(all_labels).ravel()\n"
      ],
      "metadata": {
        "id": "5DuXPowak3KR"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "# Compute Confusion Matrix\n",
        "threshold = 0.5\n",
        "pred_classes = (all_preds >= threshold).astype(int)\n",
        "cm = confusion_matrix(all_labels, pred_classes)\n",
        "\n",
        "# Plot Confusion Matrix\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"Real\", \"Fake\"], yticklabels=[\"Real\", \"Fake\"])\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.savefig(f\"{checkpoints_dir}/confusion_matrix.png\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "e2f9yYLok5Tq",
        "outputId": "1bafde9c-202b-4386-bac8-1856bfb5b047"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "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MDBQ/fr10+nTp4tUB00iAACAyey4VxGcPHlSUVFR8vT01IoVK7Rnzx5NmDBBpUuXto0ZP368pkyZosTERG3dulU+Pj6Kjo5Wdna2bUyPHj20e/durV69WsuWLdOGDRs0YMCAon0kVqvVWqQjigHveoOcXQIABzm5baqzSwDgICWdeBOcd6cZDjv3uc8fL/TY559/Xps2bdK333572f1Wq1VhYWEaMmSIhg4dKknKzMxUSEiIZs+ere7du+vnn39WRESEtm3bpgYNGkiSvv76a9177736448/FBYWVqhaSBIBAABMJoe9cnJylJWVZffKycm5bBlffPGFGjRooAcffFDBwcGqV6+e3nvvPdv+w4cPKy0tTW3atLFtCwgIUKNGjZSUlCRJSkpKUmBgoK1BlKQ2bdrIbDZr69athf5IaBIBAAAcKCEhQQEBAXavhISEy449dOiQpk+frqpVq2rlypUaOHCgnn76ac2ZM0eSlJaWJkkKCQmxOy4kJMS2Ly0tTcHBwXb7S5QooaCgINuYwuDpZgAAAAeukzhixAjFx8fbbbNYLJcdW1BQoAYNGmjcuHGSpHr16mnXrl1KTExUbGysw2q8HJJEAAAAB043WywW+fv7272u1CSWK1dOERERdttq1KihlJQUSVJoaKgkKT093W5Menq6bV9oaKiOHj1qt//8+fM6ceKEbUxh0CQCAAC4iKioKO3bt89u2y+//KKKFStKksLDwxUaGqo1a9bY9mdlZWnr1q2KjIyUJEVGRiojI0PJycm2MWvXrlVBQYEaNWpU6FqYbgYAAG7P5CKLaQ8ePFh33323xo0bp4ceekjfffed3n33Xb377ruSLtT57LPP6pVXXlHVqlUVHh6uF198UWFhYercubOkC8njPffco8cee0yJiYnKy8vToEGD1L1790I/2SzRJAIAALiMhg0basmSJRoxYoTGjBmj8PBwvfXWW+rRo4dtzPDhw3XmzBkNGDBAGRkZatKkib7++muVLFnSNmbevHkaNGiQWrduLbPZrK5du2rKlClFqoV1EgEUK6yTCNy8nLlOos8Dsxx27jOL+jrs3I7EPYkAAAAwYLoZAADANW5JdCkkiQAAADAgSQQAAG7PVZ5udiU0iQAAwO3RJBox3QwAAAADkkQAAOD2SBKNSBIBAABgQJIIAADcHkmiEUkiAAAADEgSAQAA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z2QyOez1b7z22msymUx69tlnbduys7MVFxenMmXKyNfXV127dlV6errdcSkpKYqJiVGpUqUUHBysYcOG6fz580W6Nk0iAACAC9q2bZtmzJih2rVr220fPHiwvvzySy1cuFDr169XamqqunTpYtufn5+vmJgY5ebmavPmzZozZ45mz56tUaNGFen6NIkAAMDtmUyOe12L06dPq0ePHnrvvfdUunRp2/bMzEzNnDlTEydOVKtWrVS/fn3NmjVLmzdv1pYtWyRJq1at0p49e/TRRx+pbt26at++vcaOHat33nlHubm5ha6BJhEAAMCBcnJylJWVZffKycm56jFxcXGKiYlRmzZt7LYnJycrLy/Pbnv16tVVoUIFJSUlSZKSkpJUq1YthYSE2MZER0crKytLu3fvLnTdNIkAAMDtOfKexISEBAUEBNi9EhISrljLxx9/rB9++OGyY9LS0uTl5aXAwEC77SEhIUpLS7ON+XuDeHH/xX2FVaglcL744otCn/C+++4r9FgAAICb3YgRIxQfH2+3zWKxXHbs77//rmeeeUarV69WyZIlb0R5V1SoJrFz586FOpnJZFJ+fv6/qQcAAOCGc+Q6iRaL5YpN4aWSk5N19OhR3XXXXbZt+fn52rBhg6ZOnaqVK1cqNzdXGRkZdmlienq6QkNDJUmhoaH67rvv7M578enni2MKo1DTzQUFBYV60SACAIDiyFWWwGndurV27typHTt22F4NGjRQjx49bP/u6empNWvW2I7Zt2+fUlJSFBkZKUmKjIzUzp07dfToUduY1atXy9/fXxEREYWuhW9cAQAAcBF+fn6qWbOm3TYfHx+VKVPGtr1fv36Kj49XUFCQ/P399dRTTykyMlKNGzeWJLVr104RERHq1auXxo8fr7S0NL3wwguKi4srdKIpXWOTeObMGa1fv14pKSmGR6mffvrpazklAACA0xSnb+WbNGmSzGazunbtqpycHEVHR2vatGm2/R4eHlq2bJkGDhyoyMhI+fj4KDY2VmPGjCnSdUxWq9ValAO2b9+ue++9V2fPntWZM2cUFBSkv/76y7ai96FDh4pUgCN41xvk7BIAOMjJbVOdXQIABynpxPnNRz/e6bBzf9C9lsPO7UhFXgJn8ODB6tixo06ePClvb29t2bJFv/32m+rXr68333zTETUCAAA4lNlkctiruCpyk7hj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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Compute Classification Report\n",
        "report = classification_report(all_labels, pred_classes, target_names=[\"Real\", \"Fake\"], output_dict=True)\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(all_labels, pred_classes, target_names=[\"Real\", \"Fake\"]))\n",
        "\n",
        "# Save Classification Report\n",
        "with open(f\"{checkpoints_dir}/classification_report.txt\", \"w\") as f:\n",
        "    f.write(classification_report(all_labels, pred_classes, target_names=[\"Real\", \"Fake\"]))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DgQ0ElHrlKiy",
        "outputId": "ceb56aa0-4580-4a5c-c3f6-f7e0a743149e"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        Real       0.83      0.89      0.86       750\n",
            "        Fake       0.89      0.83      0.86       763\n",
            "\n",
            "    accuracy                           0.86      1513\n",
            "   macro avg       0.86      0.86      0.86      1513\n",
            "weighted avg       0.86      0.86      0.86      1513\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve, auc # Importing the necessary functions\n",
        "\n",
        "# Compute ROC Curve\n",
        "fpr, tpr, _ = roc_curve(all_labels, all_preds)\n",
        "roc_auc = auc(fpr, tpr)\n"
      ],
      "metadata": {
        "id": "yMMOcGQelSKX"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot ROC Curve\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC Curve (AUC = {roc_auc:.2f})')\n",
        "plt.plot([0, 1], [0, 1], color='gray', lw=2, linestyle='--')\n",
        "plt.title(\"Receiver Operating Characteristic (ROC) Curve\")\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.savefig(f\"{checkpoints_dir}/roc_curve.png\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 516
        },
        "id": "b8CC83eLlZ0H",
        "outputId": "39620055-5fc0-440d-ecf3-30874412d45f"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save Metrics Summary\n",
        "metrics_summary = {\n",
        "    \"Accuracy\": report[\"accuracy\"],\n",
        "    \"Precision (Fake)\": report[\"Fake\"][\"precision\"],\n",
        "    \"Recall (Fake)\": report[\"Fake\"][\"recall\"],\n",
        "    \"F1-Score (Fake)\": report[\"Fake\"][\"f1-score\"],\n",
        "    \"ROC AUC\": roc_auc\n",
        "}\n",
        "with open(f\"{checkpoints_dir}/metrics_summary.txt\", \"w\") as f:\n",
        "    for key, value in metrics_summary.items():\n",
        "        f.write(f\"{key}: {value:.4f}\\n\")\n",
        "\n",
        "# Print Summary\n",
        "print(\"Metrics Summary:\")\n",
        "for key, value in metrics_summary.items():\n",
        "    print(f\"{key}: {value:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "75C0-s3VldnB",
        "outputId": "96f95901-2ddb-45a8-ac20-0927a2d21194"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics Summary:\n",
            "Accuracy: 0.8599\n",
            "Precision (Fake): 0.8886\n",
            "Recall (Fake): 0.8257\n",
            "F1-Score (Fake): 0.8560\n",
            "ROC AUC: 0.9512\n"
          ]
        }
      ]
    }
  ]
}